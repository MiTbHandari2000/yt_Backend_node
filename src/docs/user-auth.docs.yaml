tags:
  - name: User Authentication
    description: User registration, login, and token management.
  - name: User Account
    description: User account and profile management (requires authentication).

paths:
  /users/register:
    post:
      tags: [User Authentication]
      summary: Register a new user
      description: Creates a new user account. Avatar image is required. Cover Image is optional.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - fullName
                - userName
                - email
                - password
                - avatar
              properties:
                fullName:
                  type: string
                  example: Test User
                userName:
                  type: string
                  example: testuser_reg123
                email:
                  type: string
                  format: email
                  example: register@example.com
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: StrongPa$$123
                avatar:
                  type: string
                  format: binary
                  description: Avatar image file (e.g., .jpg, .png).
                coverImage:
                  type: string
                  format: binary
                  description: Cover image file (optional).
      responses:
        "201":
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse_User" # Assumes ApiResponse_User wraps UserResponse
        "400":
          description: Bad Request (e.g., missing fields, invalid email).
          content: { $ref: "#/components/responses/BadRequestError" }
        "409":
          description: Conflict (username or email already exists).
          content: { $ref: "#/components/responses/ConflictError" }
        "500":
          description: Internal Server Error.
          content: { $ref: "#/components/responses/InternalServerError" }

  /users/login:
    post:
      tags: [User Authentication]
      summary: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: User logged in successfully. Tokens in body and HttpOnly cookies.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse_LoginSuccessData"
          headers:
            Set-Cookie:
              description: HttpOnly cookies for accessToken and refreshToken.
              schema: { type: string } # Example: "accessToken=...; refreshToken=..."
        "400":
          description: Bad Request (missing credentials).
          content: { $ref: "#/components/responses/BadRequestError" }
        "401":
          description: Unauthorized (Invalid credentials).
          content: { $ref: "#/components/responses/UnauthorizedError" }
        "404":
          description: User not found.
          content: { $ref: "#/components/responses/NotFoundError" }

  /users/refresh-token:
    post:
      tags: [User Authentication]
      summary: Refresh JWT access token
      description: Uses a refresh token (expected via HttpOnly cookie or optionally in request body) to issue new access and refresh tokens.
      requestBody:
        required: false # Primarily relies on cookie
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: User's refresh token (optional if sent as cookie).
      responses:
        "200":
          description: Tokens refreshed successfully. New tokens in body and HttpOnly cookies.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse_RefreshTokenData" # Define RefreshTokenData schema
          headers:
            Set-Cookie:
              description: HttpOnly cookies for new accessToken and refreshToken.
              schema: { type: string }
        "401":
          description: Unauthorized (refresh token missing, invalid, or expired).
          content: { $ref: "#/components/responses/UnauthorizedError" }

  /users/logout:
    post:
      tags: [User Account]
      summary: Logout the current authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User logged out successfully. Cookies cleared.
          content: { $ref: "#/components/responses/GenericSuccess" }
        "401":
          description: Unauthorized.
          content: { $ref: "#/components/responses/UnauthorizedError" }

  /users/change-password:
    post: # Or PATCH, be consistent with your choice
      tags: [User Account]
      summary: Change current user's password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChangeRequest"
      responses:
        "200":
          description: Password changed successfully.
          content: { $ref: "#/components/responses/GenericSuccess" }
        "400":
          description: Bad Request (e.g., old password incorrect, new password invalid).
          content: { $ref: "#/components/responses/BadRequestError" }
        "401":
          description: Unauthorized.
          content: { $ref: "#/components/responses/UnauthorizedError" }

  /users/current-user:
    get:
      tags: [User Account]
      summary: Get current authenticated user's details
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user details fetched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse_User"
        "401":
          description: Unauthorized.
          content: { $ref: "#/components/responses/UnauthorizedError" }

  /users/update-account:
    patch:
      tags: [User Account]
      summary: Update current user's account details (fullName, email)
      security:
        - bearerAuth: []
      requestBody:
        # required: true # Controller logic allows at least one
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountUpdateRequest"
      responses:
        "200":
          description: Account details updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse_User"
        "400":
          {
            description: "Bad Request.",
            content: { $ref: "#/components/responses/BadRequestError" },
          }
        "401":
          {
            description: "Unauthorized.",
            content: { $ref: "#/components/responses/UnauthorizedError" },
          }
        "409":
          {
            description: "Conflict (e.g., email already in use).",
            content: { $ref: "#/components/responses/ConflictError" },
          }

  /users/avatar:
    patch:
      tags: [User Account]
      summary: Update current user's avatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [avatar]
              properties:
                avatar:
                  {
                    type: string,
                    format: binary,
                    description: "New avatar image file.",
                  }
      responses:
        "200":
          description: Avatar updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse_User"
        "400":
          {
            description: "Bad Request.",
            content: { $ref: "#/components/responses/BadRequestError" },
          }
        "401":
          {
            description: "Unauthorized.",
            content: { $ref: "#/components/responses/UnauthorizedError" },
          }
        "500":
          {
            description: "Internal Server Error (e.g. upload failed).",
            content: { $ref: "#/components/responses/InternalServerError" },
          }

  /users/cover-image:
    patch:
      tags: [User Account]
      summary: Update current user's cover image
      security:
        - bearerAuth: []
      requestBody:
        # required: true # If a file MUST be sent. Optional if clearing is allowed or no change
        content:
          multipart/form-data:
            schema:
              type: object
              properties: # Mark as required: [coverImage] if not optional
                coverImage:
                  {
                    type: string,
                    format: binary,
                    description: "New cover image file.",
                  }
      responses:
        "200":
          description: Cover image updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse_User"
        "400":
          {
            description: "Bad Request.",
            content: { $ref: "#/components/responses/BadRequestError" },
          }
        "401":
          {
            description: "Unauthorized.",
            content: { $ref: "#/components/responses/UnauthorizedError" },
          }
        "500":
          {
            description: "Internal Server Error (e.g. upload failed).",
            content: { $ref: "#/components/responses/InternalServerError" },
          }

  /users/c/{userName}:
    get:
      tags: [User Account] # Or a "Public Profile" tag if auth is truly optional
      summary: Get user channel profile by username
      parameters:
        - name: userName
          in: path
          required: true
          description: Username of the channel profile to retrieve.
          schema: { type: string, example: "testuser123" }
      security: # Add if 'isSubscribed' requires knowing the requester
        - bearerAuth: []
      responses:
        "200":
          description: Channel profile fetched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse_UserChannelProfileData"
        "400":
          {
            description: "Bad Request (e.g., username missing).",
            content: { $ref: "#/components/responses/BadRequestError" },
          }
        "401":
          {
            description: "Unauthorized (if security is applied).",
            content: { $ref: "#/components/responses/UnauthorizedError" },
          }
        "404":
          {
            description: "Not Found (Channel with username does not exist).",
            content: { $ref: "#/components/responses/NotFoundError" },
          }

  /users/history:
    get:
      tags: [User Account]
      summary: Get current user's watch history (paginated)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
          description: Page number for pagination.
        - name: limit
          in: query
          schema: { type: integer, default: 10 }
          description: Number of items per page.
      responses:
        "200":
          description: Watch history fetched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse_PaginatedWatchHistoryData"
        "401":
          description: Unauthorized.
          content: { $ref: "#/components/responses/UnauthorizedError" }
